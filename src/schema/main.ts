/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/bootstrap/": {
    /**
     * Get Bootstrap Instructions
     * @description Return a website containing instructions for installing the Murfey client on a
     * machine with no internet access.
     */
    get: operations["get_bootstrap_instructions_bootstrap__get"];
  };
  "/bootstrap/pip.whl": {
    /**
     * Get Pip Wheel
     * @description Return a static version of pip. This does not need to be the newest or best,
     * but has to be compatible with all supported Python versions.
     * This is only used during bootstrapping by the client to identify and then
     * download the actually newest appropriate version of pip.
     */
    get: operations["get_pip_wheel_bootstrap_pip_whl_get"];
  };
  "/bootstrap/murfey.whl": {
    /**
     * Get Murfey Wheel
     * @description Return a wheel file containing the latest release version of Murfey. We should
     * not have to worry about the exact Python compatibility here, as long as
     * murfey.bootstrap is compatible with all relevant versions of Python.
     * This also ignores yanked releases, which again should be fine.
     */
    get: operations["get_murfey_wheel_bootstrap_murfey_whl_get"];
  };
  "/cygwin/setup-x86_64.exe": {
    /**
     * Get Cygwin Setup
     * @description Obtain and past though a Cygwin installer from an official source.
     * This is used during client bootstrapping and can download and install the
     * Cygwin distribution that then remains on the client machines.
     */
    get: operations["get_cygwin_setup_cygwin_setup_x86_64_exe_get"];
  };
  "/cygwin/{request_path}": {
    /**
     * Parse Cygwin Request
     * @description Forward a Cygwin setup request to an official mirror.
     */
    get: operations["parse_cygwin_request_cygwin__request_path__get"];
  };
  "/pypi/": {
    /**
     * Get Pypi Index
     * @description Obtain list of all PyPI packages via the simple API (PEP 503).
     */
    get: operations["get_pypi_index_pypi__get"];
  };
  "/pypi/{package}/": {
    /**
     * Get Pypi Package Downloads List
     * @description Obtain list of all package downloads from PyPI via the simple API (PEP 503),
     * and rewrite all download URLs to point to this server,
     * underneath the current directory.
     */
    get: operations["get_pypi_package_downloads_list_pypi__package___get"];
  };
  "/pypi/{package}/{filename}": {
    /**
     * Get Pypi File
     * @description Obtain and pass through a specific download for a PyPI package.
     */
    get: operations["get_pypi_file_pypi__package___filename__get"];
  };
  "/ws/test/{client_id}": {
    /** Close Ws Connection */
    delete: operations["close_ws_connection_ws_test__client_id__delete"];
  };
  "/instrument_server": {
    /** Check Instrument Server */
    get: operations["check_instrument_server_instrument_server_get"];
  };
  "/": {
    /** Root */
    get: operations["root__get"];
  };
  "/machine/": {
    /** Machine Info */
    get: operations["machine_info_machine__get"];
  };
  "/microscope/": {
    /** Get Mic */
    get: operations["get_mic_microscope__get"];
  };
  "/microscope_image/": {
    /** Get Mic Image */
    get: operations["get_mic_image_microscope_image__get"];
  };
  "/instrument_name/": {
    /** Get Instrument Name */
    get: operations["get_instrument_name_instrument_name__get"];
  };
  "/mag_table/": {
    /** Get Mag Table */
    get: operations["get_mag_table_mag_table__get"];
    /** Add To Mag Table */
    post: operations["add_to_mag_table_mag_table__post"];
  };
  "/visits/": {
    /** All Visit Info */
    get: operations["all_visit_info_visits__get"];
  };
  "/visits/{visit_name}": {
    /** Visit Info */
    get: operations["visit_info_visits__visit_name__get"];
    /** Register Client To Visit */
    post: operations["register_client_to_visit_visits__visit_name__post"];
  };
  "/visits/{visit_name}/rsyncer": {
    /** Register Rsyncer */
    post: operations["register_rsyncer_visits__visit_name__rsyncer_post"];
  };
  "/clients/{client_id}/rsyncers": {
    /** Get Rsyncers For Client */
    get: operations["get_rsyncers_for_client_clients__client_id__rsyncers_get"];
  };
  "/sessions/{session_id}/rsyncers": {
    /** Get Rsyncers For Session */
    get: operations["get_rsyncers_for_session_sessions__session_id__rsyncers_get"];
  };
  "/visits/{visit_name}/increment_rsync_file_count": {
    /** Increment Rsync File Count */
    post: operations["increment_rsync_file_count_visits__visit_name__increment_rsync_file_count_post"];
  };
  "/visits/{visit_name}/increment_rsync_transferred_files": {
    /** Increment Rsync Transferred Files */
    post: operations["increment_rsync_transferred_files_visits__visit_name__increment_rsync_transferred_files_post"];
  };
  "/clients/{client_id}/spa_processing_parameters": {
    /** Get Spa Proc Params */
    get: operations["get_spa_proc_params_clients__client_id__spa_processing_parameters_get"];
    /** Register Spa Proc Params */
    post: operations["register_spa_proc_params_clients__client_id__spa_processing_parameters_post"];
  };
  "/sessions/{session_id}/spa_processing_parameters": {
    /** Get Spa Proc Param Details */
    get: operations["get_spa_proc_param_details_sessions__session_id__spa_processing_parameters_get"];
  };
  "/visits/{visit_name}/tilt_series": {
    /** Register Tilt Series */
    post: operations["register_tilt_series_visits__visit_name__tilt_series_post"];
  };
  "/visits/{visit_name}/{client_id}/completed_tilt_series": {
    /** Register Completed Tilt Series */
    post: operations["register_completed_tilt_series_visits__visit_name___client_id__completed_tilt_series_post"];
  };
  "/visits/{visit_name}/tilt": {
    /** Register Tilt */
    post: operations["register_tilt_visits__visit_name__tilt_post"];
  };
  "/visits_raw": {
    /** Get Current Visits */
    get: operations["get_current_visits_visits_raw_get"];
  };
  "/visits/{visit_name}/context": {
    /** Register Context */
    post: operations["register_context_visits__visit_name__context_post"];
  };
  "/visits/{visit_name}/files": {
    /** Add File */
    post: operations["add_file_visits__visit_name__files_post"];
  };
  "/feedback": {
    /** Send Murfey Message */
    post: operations["send_murfey_message_feedback_post"];
  };
  "/visits/{visit_name}/spa_processing": {
    /** Request Spa Processing */
    post: operations["request_spa_processing_visits__visit_name__spa_processing_post"];
  };
  "/visits/{visit_name}/{client_id}/flush_spa_processing": {
    /** Flush Spa Processing */
    post: operations["flush_spa_processing_visits__visit_name___client_id__flush_spa_processing_post"];
  };
  "/visits/{visit_name}/{client_id}/spa_preprocess": {
    /** Request Spa Preprocessing */
    post: operations["request_spa_preprocessing_visits__visit_name___client_id__spa_preprocess_post"];
  };
  "/visits/{visit_name}/tomography_preprocess": {
    /** Request Tomography Preprocessing */
    post: operations["request_tomography_preprocessing_visits__visit_name__tomography_preprocess_post"];
  };
  "/visits/{visit_name}/align": {
    /** Request Tilt Series Alignment */
    post: operations["request_tilt_series_alignment_visits__visit_name__align_post"];
  };
  "/version": {
    /** Get Version */
    get: operations["get_version_version_get"];
  };
  "/visits/{visit_name}/suggested_path": {
    /** Suggest Path */
    post: operations["suggest_path_visits__visit_name__suggested_path_post"];
  };
  "/visits/{visit_name}/{client_id}/register_data_collection_group": {
    /** Register Dc Group */
    post: operations["register_dc_group_visits__visit_name___client_id__register_data_collection_group_post"];
  };
  "/visits/{visit_name}/{client_id}/start_data_collection": {
    /** Start Dc */
    post: operations["start_dc_visits__visit_name___client_id__start_data_collection_post"];
  };
  "/visits/{visit_name}/{client_id}/register_processing_job": {
    /** Register Proc */
    post: operations["register_proc_visits__visit_name___client_id__register_processing_job_post"];
  };
  "/visits/{visit_name}/write_connections_file": {
    /** Write Conn File */
    post: operations["write_conn_file_visits__visit_name__write_connections_file_post"];
  };
  "/visits/{visit_name}/process_gain": {
    /** Process Gain */
    post: operations["process_gain_visits__visit_name__process_gain_post"];
  };
  "/possible_gain_references": {
    /** Get Possible Gain References */
    get: operations["get_possible_gain_references_possible_gain_references_get"];
  };
  "/new_client_id/": {
    /** New Client Id */
    get: operations["new_client_id_new_client_id__get"];
  };
  "/clients": {
    /** Get Clients */
    get: operations["get_clients_clients_get"];
  };
  "/sessions": {
    /** Get Sessions */
    get: operations["get_sessions_sessions_get"];
  };
  "/session/{session_id}": {
    /** Get Session */
    get: operations["get_session_session__session_id__get"];
  };
  "/clients/{client_id}/session": {
    /** Link Client To Session */
    post: operations["link_client_to_session_clients__client_id__session_post"];
    /** Remove Session */
    delete: operations["remove_session_clients__client_id__session_delete"];
  };
  "/visits/{visit}/session/{name}": {
    /** Create Session */
    post: operations["create_session_visits__visit__session__name__post"];
  };
  "/sessions/{session_id}": {
    /** Remove Session By Id */
    delete: operations["remove_session_by_id_sessions__session_id__delete"];
  };
  "/visits/{visit_name}/eer_fractionation_file": {
    /** Write Eer Fractionation File */
    post: operations["write_eer_fractionation_file_visits__visit_name__eer_fractionation_file_post"];
  };
  "/sessions/{session_id}/multigrid_watcher": {
    /** Start Multigrid Watcher */
    post: operations["start_multigrid_watcher_sessions__session_id__multigrid_watcher_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** ClientEnvironment */
    ClientEnvironment: {
      /** Client Id */
      client_id?: number;
      /**
       * Visit
       * @default
       */
      visit?: string;
      /** Session Id */
      session_id?: number;
      /** Connected */
      connected: boolean;
    };
    /** ClientInfo */
    ClientInfo: {
      /** Id */
      id: number;
    };
    /** CompletedTiltSeries */
    CompletedTiltSeries: {
      /** Tilt Series */
      tilt_series: string[];
      /** Rsync Source */
      rsync_source: string;
    };
    /** ConnectionFileParameters */
    ConnectionFileParameters: {
      /** Filename */
      filename: string;
      /** Destinations */
      destinations: string[];
    };
    /** ContextInfo */
    ContextInfo: {
      /** Experiment Type */
      experiment_type: string;
      /** Acquisition Software */
      acquisition_software: string;
    };
    /** DCGroupParameters */
    DCGroupParameters: {
      /** Experiment Type */
      experiment_type: string;
      /** Experiment Type Id */
      experiment_type_id: number;
      /** Tag */
      tag: string;
    };
    /** DCParameters */
    DCParameters: {
      /** Voltage */
      voltage: number;
      /** Pixel Size On Image */
      pixel_size_on_image: string;
      /** Experiment Type */
      experiment_type: string;
      /** Image Size X */
      image_size_x: number;
      /** Image Size Y */
      image_size_y: number;
      /** File Extension */
      file_extension: string;
      /** Acquisition Software */
      acquisition_software: string;
      /** Image Directory */
      image_directory: string;
      /** Tag */
      tag: string;
      /** Source */
      source: string;
      /** Magnification */
      magnification: number;
      /** Total Exposed Dose */
      total_exposed_dose?: number;
      /** C2Aperture */
      c2aperture?: number;
      /** Exposure Time */
      exposure_time?: number;
      /** Slit Width */
      slit_width?: number;
      /**
       * Phase Plate
       * @default false
       */
      phase_plate?: boolean;
    };
    /** DataCollection */
    DataCollection: {
      /** Id */
      id: number;
      /** Tag */
      tag: string;
      /** Dcg Id */
      dcg_id: number;
    };
    /** DataCollectionGroup */
    DataCollectionGroup: {
      /** Id */
      id: number;
      /** Session Id */
      session_id: number;
      /** Tag */
      tag: string;
    };
    /** File */
    File: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Size */
      size: number;
      /** Timestamp */
      timestamp: number;
    };
    /** FractionationParameters */
    FractionationParameters: {
      /** Num Frames */
      num_frames: number;
      /** Fractionation */
      fractionation: number;
      /** Dose Per Frame */
      dose_per_frame: number;
      /**
       * Fractionation File Name
       * @default eer_fractionation.txt
       */
      fractionation_file_name?: string;
    };
    /** GainReference */
    GainReference: {
      /**
       * Gain Ref
       * Format: path
       */
      gain_ref: string;
      /**
       * Rescale
       * @default true
       */
      rescale?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MachineConfig */
    MachineConfig: {
      /** Acquisition Software */
      acquisition_software: string[];
      /** Calibrations */
      calibrations: {
        [key: string]: {
          [key: string]: Record<string, never> | number;
        };
      };
      /** Data Directories */
      data_directories: {
        [key: string]: string;
      };
      /**
       * Rsync Basepath
       * Format: path
       */
      rsync_basepath: string;
      /** Murfey Db Credentials */
      murfey_db_credentials: string;
      /**
       * Display Name
       * @default
       */
      display_name?: string;
      /**
       * Image Path
       * Format: path
       */
      image_path?: string;
      /**
       * Software Versions
       * @default {}
       */
      software_versions?: {
        [key: string]: string;
      };
      /**
       * External Executables
       * @default {}
       */
      external_executables?: {
        [key: string]: string;
      };
      /**
       * External Environment
       * @default {}
       */
      external_environment?: {
        [key: string]: string;
      };
      /**
       * Rsync Module
       * @default
       */
      rsync_module?: string;
      /**
       * Create Directories
       * @default [
       *   "atlas"
       * ]
       */
      create_directories?: string[];
      /**
       * Gain Reference Directory
       * Format: path
       */
      gain_reference_directory?: string;
      /**
       * Processed Directory Name
       * @default processed
       */
      processed_directory_name?: string;
      /**
       * Gain Directory Name
       * @default processing
       */
      gain_directory_name?: string;
      /**
       * Feedback Queue
       * @default murfey_feedback
       */
      feedback_queue?: string;
      /**
       * Superres
       * @default false
       */
      superres?: boolean;
      /**
       * Camera
       * @default FALCON
       */
      camera?: string;
      /**
       * Data Required Substrings
       * @default {}
       */
      data_required_substrings?: {
        [key: string]: {
          [key: string]: string[];
        };
      };
      /**
       * Allow Removal
       * @default false
       */
      allow_removal?: boolean;
      /**
       * Modular Spa
       * @default false
       */
      modular_spa?: boolean;
      /**
       * Processing Enabled
       * @default true
       */
      processing_enabled?: boolean;
      /**
       * Machine Override
       * @default
       */
      machine_override?: string;
      /**
       * Processed Extra Directory
       * @default
       */
      processed_extra_directory?: string;
      /**
       * Instrument Name
       * @default
       */
      instrument_name?: string;
      /**
       * Instrument Server
       * @default
       */
      instrument_server?: string;
    };
    /** MagnificationLookup */
    MagnificationLookup: {
      /** Magnification */
      magnification: number;
      /** Pixel Size */
      pixel_size: number;
    };
    /** MultigridWatcherSetup */
    MultigridWatcherSetup: {
      /**
       * Source
       * Format: path
       */
      source: string;
      /**
       * Skip Existing Processing
       * @default false
       */
      skip_existing_processing?: boolean;
    };
    /** ProcessFile */
    ProcessFile: {
      /** Path */
      path: string;
      /** Description */
      description: string;
      /** Size */
      size: number;
      /** Timestamp */
      timestamp: number;
      /** Processing Job */
      processing_job?: number;
      /** Data Collection Id */
      data_collection_id?: number;
      /** Image Number */
      image_number: number;
      /** Mc Uuid */
      mc_uuid: number;
      /** Autoproc Program Id */
      autoproc_program_id?: number;
      /** Pixel Size */
      pixel_size: number;
      /** Dose Per Frame */
      dose_per_frame: number;
      /**
       * Voltage
       * @default 300
       */
      voltage?: number;
      /**
       * Mc Binning
       * @default 1
       */
      mc_binning?: number;
      /** Gain Ref */
      gain_ref?: string;
      /**
       * Extract Downscale
       * @default 1
       */
      extract_downscale?: number;
      /** Eer Fractionation File */
      eer_fractionation_file?: string;
    };
    /** ProcessingDetails */
    ProcessingDetails: {
      data_collection_group: components["schemas"]["DataCollectionGroup"];
      /** Data Collections */
      data_collections: components["schemas"]["DataCollection"][];
      /** Processing Jobs */
      processing_jobs: components["schemas"]["ProcessingJob"][];
      relion_params: components["schemas"]["SPARelionParameters"];
      feedback_params: components["schemas"]["SPAFeedbackParameters"];
    };
    /** ProcessingJob */
    ProcessingJob: {
      /** Id */
      id: number;
      /** Recipe */
      recipe: string;
      /** Dc Id */
      dc_id: number;
    };
    /** ProcessingJobParameters */
    ProcessingJobParameters: {
      /** Tag */
      tag: string;
      /** Recipe */
      recipe: string;
      /**
       * Parameters
       * @default {}
       */
      parameters?: Record<string, never>;
      /**
       * Experiment Type
       * @default spa
       */
      experiment_type?: string;
    };
    /** ProcessingParametersSPA */
    ProcessingParametersSPA: {
      /** Tag */
      tag: string;
      /** Dose Per Frame */
      dose_per_frame: number;
      /** Gain Ref */
      gain_ref?: string;
      /** Experiment Type */
      experiment_type: string;
      /** Voltage */
      voltage: number;
      /** Image Size X */
      image_size_x: number;
      /** Image Size Y */
      image_size_y: number;
      /** Pixel Size On Image */
      pixel_size_on_image: string;
      /** Motion Corr Binning */
      motion_corr_binning: number;
      /** File Extension */
      file_extension: string;
      /** Acquisition Software */
      acquisition_software: string;
      /** Use Cryolo */
      use_cryolo: boolean;
      /** Symmetry */
      symmetry: string;
      /** Mask Diameter */
      mask_diameter?: number;
      /** Boxsize */
      boxsize?: number;
      /** Downscale */
      downscale: boolean;
      /** Small Boxsize */
      small_boxsize?: number;
      /** Eer Fractionation */
      eer_fractionation: number;
      /** Particle Diameter */
      particle_diameter?: number;
      /** Magnification */
      magnification?: number;
      /** Total Exposed Dose */
      total_exposed_dose?: number;
      /** C2Aperture */
      c2aperture?: number;
      /** Exposure Time */
      exposure_time?: number;
      /** Slit Width */
      slit_width?: number;
      /**
       * Phase Plate
       * @default false
       */
      phase_plate?: boolean;
    };
    /** RegistrationMessage */
    RegistrationMessage: {
      /** Registration */
      registration: string;
      /** Params */
      params?: Record<string, never>;
    };
    /** RsyncInstance */
    RsyncInstance: {
      /** Source */
      source: string;
      /**
       * Destination
       * @default
       */
      destination?: string;
      /** Session Id */
      session_id: number;
      /**
       * Tag
       * @default
       */
      tag?: string;
      /**
       * Files Transferred
       * @default 0
       */
      files_transferred?: number;
      /**
       * Files Counted
       * @default 0
       */
      files_counted?: number;
      /**
       * Transferring
       * @default false
       */
      transferring?: boolean;
    };
    /** RsyncerInfo */
    RsyncerInfo: {
      /** Source */
      source: string;
      /** Destination */
      destination: string;
      /** Session Id */
      session_id: number;
      /**
       * Transferring
       * @default true
       */
      transferring?: boolean;
      /**
       * Increment Count
       * @default 1
       */
      increment_count?: number;
      /**
       * Bytes
       * @default 0
       */
      bytes?: number;
      /**
       * Increment Data Count
       * @default 0
       */
      increment_data_count?: number;
      /**
       * Data Bytes
       * @default 0
       */
      data_bytes?: number;
      /**
       * Tag
       * @default
       */
      tag?: string;
    };
    /** SPAFeedbackParameters */
    SPAFeedbackParameters: {
      /** Pj Id */
      pj_id: number;
      /**
       * Estimate Particle Diameter
       * @default true
       */
      estimate_particle_diameter?: boolean;
      /**
       * Hold Class2D
       * @default false
       */
      hold_class2d?: boolean;
      /**
       * Rerun Class2D
       * @default false
       */
      rerun_class2d?: boolean;
      /**
       * Hold Class3D
       * @default false
       */
      hold_class3d?: boolean;
      /** Class Selection Score */
      class_selection_score: number;
      /** Star Combination Job */
      star_combination_job: number;
      /** Initial Model */
      initial_model: string;
      /** Next Job */
      next_job: number;
      /** Picker Murfey Id */
      picker_murfey_id?: number;
      /** Picker Ispyb Id */
      picker_ispyb_id?: number;
    };
    /** SPAProcessFile */
    SPAProcessFile: {
      /** Tag */
      tag: string;
      /** Path */
      path: string;
      /** Description */
      description: string;
      /** Processing Job */
      processing_job?: number;
      /** Data Collection Id */
      data_collection_id?: number;
      /** Image Number */
      image_number: number;
      /** Autoproc Program Id */
      autoproc_program_id?: number;
      /** Pixel Size */
      pixel_size?: number;
      /** Dose Per Frame */
      dose_per_frame?: number;
      /**
       * Mc Binning
       * @default 1
       */
      mc_binning?: number;
      /** Gain Ref */
      gain_ref?: string;
      /**
       * Extract Downscale
       * @default true
       */
      extract_downscale?: boolean;
      /** Eer Fractionation File */
      eer_fractionation_file?: string;
      /**
       * Source
       * @default
       */
      source?: string;
    };
    /** SPAProcessingParameters */
    SPAProcessingParameters: {
      /** Job Id */
      job_id: number;
    };
    /** SPARelionParameters */
    SPARelionParameters: {
      /** Pj Id */
      pj_id: number;
      /** Angpix */
      angpix: number;
      /** Dose Per Frame */
      dose_per_frame: number;
      /** Gain Ref */
      gain_ref?: string;
      /** Voltage */
      voltage: number;
      /** Motion Corr Binning */
      motion_corr_binning: number;
      /** Eer Grouping */
      eer_grouping: number;
      /** Symmetry */
      symmetry: string;
      /** Particle Diameter */
      particle_diameter?: number;
      /** Downscale */
      downscale: boolean;
      /**
       * Do Icebreaker Jobs
       * @default true
       */
      do_icebreaker_jobs?: boolean;
      /**
       * Boxsize
       * @default 256
       */
      boxsize?: number;
      /**
       * Small Boxsize
       * @default 64
       */
      small_boxsize?: number;
      /**
       * Mask Diameter
       * @default 190
       */
      mask_diameter?: number;
    };
    /** Session */
    Session: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /**
       * Visit
       * @default
       */
      visit?: string;
    };
    /** SessionClients */
    SessionClients: {
      session: components["schemas"]["Session"];
      /** Clients */
      clients: components["schemas"]["ClientEnvironment"][];
    };
    /** SessionInfo */
    SessionInfo: {
      /** Session Id */
      session_id?: number;
      /**
       * Session Name
       * @default
       */
      session_name?: string;
      /**
       * Rescale
       * @default true
       */
      rescale?: boolean;
    };
    /** SuggestedPathParameters */
    SuggestedPathParameters: {
      /**
       * Base Path
       * Format: path
       */
      base_path: string;
      /**
       * Touch
       * @default false
       */
      touch?: boolean;
    };
    /** TiltInfo */
    TiltInfo: {
      /** Tilt Series Tag */
      tilt_series_tag: string;
      /** Movie Path */
      movie_path: string;
      /** Rsync Source */
      rsync_source: string;
    };
    /** TiltSeriesInfo */
    TiltSeriesInfo: {
      /** Client Id */
      client_id: number;
      /** Tag */
      tag: string;
      /** Rsync Source */
      rsync_source: string;
    };
    /** TiltSeriesProcessingDetails */
    TiltSeriesProcessingDetails: {
      /** Name */
      name: string;
      /** File Tilt List */
      file_tilt_list: string;
      /** Dcid */
      dcid: number;
      /** Processing Job */
      processing_job: number;
      /** Autoproc Program Id */
      autoproc_program_id: number;
      /** Motion Corrected Path */
      motion_corrected_path: string;
      /** Movie Id */
      movie_id: number;
      /** Pixel Size */
      pixel_size: number;
      /** Manual Tilt Offset */
      manual_tilt_offset: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Visit */
    Visit: {
      /**
       * Start
       * Format: date-time
       */
      start: string;
      /**
       * End
       * Format: date-time
       */
      end: string;
      /** Session Id */
      session_id: number;
      /** Name */
      name: string;
      /** Beamline */
      beamline: string;
      /** Proposal Title */
      proposal_title: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Bootstrap Instructions
   * @description Return a website containing instructions for installing the Murfey client on a
   * machine with no internet access.
   */
  get_bootstrap_instructions_bootstrap__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * Get Pip Wheel
   * @description Return a static version of pip. This does not need to be the newest or best,
   * but has to be compatible with all supported Python versions.
   * This is only used during bootstrapping by the client to identify and then
   * download the actually newest appropriate version of pip.
   */
  get_pip_wheel_bootstrap_pip_whl_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Murfey Wheel
   * @description Return a wheel file containing the latest release version of Murfey. We should
   * not have to worry about the exact Python compatibility here, as long as
   * murfey.bootstrap is compatible with all relevant versions of Python.
   * This also ignores yanked releases, which again should be fine.
   */
  get_murfey_wheel_bootstrap_murfey_whl_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Cygwin Setup
   * @description Obtain and past though a Cygwin installer from an official source.
   * This is used during client bootstrapping and can download and install the
   * Cygwin distribution that then remains on the client machines.
   */
  get_cygwin_setup_cygwin_setup_x86_64_exe_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Parse Cygwin Request
   * @description Forward a Cygwin setup request to an official mirror.
   */
  parse_cygwin_request_cygwin__request_path__get: {
    parameters: {
      path: {
        request_path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Pypi Index
   * @description Obtain list of all PyPI packages via the simple API (PEP 503).
   */
  get_pypi_index_pypi__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Pypi Package Downloads List
   * @description Obtain list of all package downloads from PyPI via the simple API (PEP 503),
   * and rewrite all download URLs to point to this server,
   * underneath the current directory.
   */
  get_pypi_package_downloads_list_pypi__package___get: {
    parameters: {
      path: {
        package: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Pypi File
   * @description Obtain and pass through a specific download for a PyPI package.
   */
  get_pypi_file_pypi__package___filename__get: {
    parameters: {
      path: {
        package: string;
        filename: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Close Ws Connection */
  close_ws_connection_ws_test__client_id__delete: {
    parameters: {
      path: {
        client_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Check Instrument Server */
  check_instrument_server_instrument_server_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Root */
  root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** Machine Info */
  machine_info_machine__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MachineConfig"];
        };
      };
    };
  };
  /** Get Mic */
  get_mic_microscope__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Mic Image */
  get_mic_image_microscope_image__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Instrument Name */
  get_instrument_name_instrument_name__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Mag Table */
  get_mag_table_mag_table__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MagnificationLookup"][];
        };
      };
    };
  };
  /** Add To Mag Table */
  add_to_mag_table_mag_table__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MagnificationLookup"][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** All Visit Info */
  all_visit_info_visits__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Visit Info */
  visit_info_visits__visit_name__get: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Client To Visit */
  register_client_to_visit_visits__visit_name__post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Rsyncer */
  register_rsyncer_visits__visit_name__rsyncer_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RsyncerInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Rsyncers For Client */
  get_rsyncers_for_client_clients__client_id__rsyncers_get: {
    parameters: {
      path: {
        client_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RsyncInstance"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Rsyncers For Session */
  get_rsyncers_for_session_sessions__session_id__rsyncers_get: {
    parameters: {
      path: {
        session_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RsyncInstance"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Increment Rsync File Count */
  increment_rsync_file_count_visits__visit_name__increment_rsync_file_count_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RsyncerInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Increment Rsync Transferred Files */
  increment_rsync_transferred_files_visits__visit_name__increment_rsync_transferred_files_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RsyncerInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Spa Proc Params */
  get_spa_proc_params_clients__client_id__spa_processing_parameters_get: {
    parameters: {
      path: {
        client_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Spa Proc Params */
  register_spa_proc_params_clients__client_id__spa_processing_parameters_post: {
    parameters: {
      path: {
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessingParametersSPA"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Spa Proc Param Details */
  get_spa_proc_param_details_sessions__session_id__spa_processing_parameters_get: {
    parameters: {
      path: {
        session_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessingDetails"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Tilt Series */
  register_tilt_series_visits__visit_name__tilt_series_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TiltSeriesInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Completed Tilt Series */
  register_completed_tilt_series_visits__visit_name___client_id__completed_tilt_series_post: {
    parameters: {
      path: {
        visit_name: string;
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompletedTiltSeries"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Tilt */
  register_tilt_visits__visit_name__tilt_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TiltInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Current Visits */
  get_current_visits_visits_raw_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Visit"][];
        };
      };
    };
  };
  /** Register Context */
  register_context_visits__visit_name__context_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add File */
  add_file_visits__visit_name__files_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["File"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Send Murfey Message */
  send_murfey_message_feedback_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrationMessage"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Request Spa Processing */
  request_spa_processing_visits__visit_name__spa_processing_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SPAProcessingParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Flush Spa Processing */
  flush_spa_processing_visits__visit_name___client_id__flush_spa_processing_post: {
    parameters: {
      path: {
        visit_name: string;
        client_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Request Spa Preprocessing */
  request_spa_preprocessing_visits__visit_name___client_id__spa_preprocess_post: {
    parameters: {
      path: {
        visit_name: string;
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SPAProcessFile"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Request Tomography Preprocessing */
  request_tomography_preprocessing_visits__visit_name__tomography_preprocess_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessFile"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Request Tilt Series Alignment */
  request_tilt_series_alignment_visits__visit_name__align_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TiltSeriesProcessingDetails"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Version */
  get_version_version_get: {
    parameters: {
      query?: {
        client_version?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Suggest Path */
  suggest_path_visits__visit_name__suggested_path_post: {
    parameters: {
      path: {
        visit_name: unknown;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestedPathParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Dc Group */
  register_dc_group_visits__visit_name___client_id__register_data_collection_group_post: {
    parameters: {
      path: {
        visit_name: string;
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DCGroupParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Start Dc */
  start_dc_visits__visit_name___client_id__start_data_collection_post: {
    parameters: {
      path: {
        visit_name: unknown;
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DCParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Register Proc */
  register_proc_visits__visit_name___client_id__register_processing_job_post: {
    parameters: {
      path: {
        visit_name: unknown;
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessingJobParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Write Conn File */
  write_conn_file_visits__visit_name__write_connections_file_post: {
    parameters: {
      path: {
        visit_name: unknown;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConnectionFileParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Process Gain */
  process_gain_visits__visit_name__process_gain_post: {
    parameters: {
      path: {
        visit_name: unknown;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GainReference"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Possible Gain References */
  get_possible_gain_references_possible_gain_references_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["File"][];
        };
      };
    };
  };
  /** New Client Id */
  new_client_id_new_client_id__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Clients */
  get_clients_clients_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ClientEnvironment"][];
        };
      };
    };
  };
  /** Get Sessions */
  get_sessions_sessions_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionClients"][];
        };
      };
    };
  };
  /** Get Session */
  get_session_session__session_id__get: {
    parameters: {
      path: {
        session_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionClients"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Link Client To Session */
  link_client_to_session_clients__client_id__session_post: {
    parameters: {
      path: {
        client_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionInfo"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove Session */
  remove_session_clients__client_id__session_delete: {
    parameters: {
      path: {
        client_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Session */
  create_session_visits__visit__session__name__post: {
    parameters: {
      path: {
        visit: string;
        name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove Session By Id */
  remove_session_by_id_sessions__session_id__delete: {
    parameters: {
      path: {
        session_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Write Eer Fractionation File */
  write_eer_fractionation_file_visits__visit_name__eer_fractionation_file_post: {
    parameters: {
      path: {
        visit_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FractionationParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Start Multigrid Watcher */
  start_multigrid_watcher_sessions__session_id__multigrid_watcher_post: {
    parameters: {
      path: {
        session_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MultigridWatcherSetup"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
